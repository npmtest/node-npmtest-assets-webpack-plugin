{"/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/test.js":"/* istanbul instrument in package npmtest_assets_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/lib.npmtest_assets_webpack_plugin.js":"/* istanbul instrument in package npmtest_assets_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_assets_webpack_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_assets_webpack_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-assets-webpack-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_assets_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_assets_webpack_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_assets_webpack_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_assets_webpack_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_assets_webpack_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_assets_webpack_plugin.__dirname + '/lib.npmtest_assets_webpack_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/node_modules/assets-webpack-plugin/index.js":"var merge = require('lodash.merge')\n\nvar getAssetKind = require('./lib/getAssetKind')\nvar isHMRUpdate = require('./lib/isHMRUpdate')\nvar isSourceMap = require('./lib/isSourceMap')\n\nvar createQueuedWriter = require('./lib/output/createQueuedWriter')\nvar createOutputWriter = require('./lib/output/createOutputWriter')\n\nfunction AssetsWebpackPlugin (options) {\n  this.options = merge({}, {\n    path: '.',\n    filename: 'webpack-assets.json',\n    prettyPrint: false,\n    update: false,\n    fullPath: true\n  }, options)\n  this.writer = createQueuedWriter(createOutputWriter(this.options))\n}\n\nAssetsWebpackPlugin.prototype = {\n\n  constructor: AssetsWebpackPlugin,\n\n  apply: function (compiler) {\n    var self = this\n\n    compiler.plugin('after-emit', function (compilation, callback) {\n      var options = compiler.options\n      var stats = compilation.getStats().toJson({\n        hash: true,\n        publicPath: true,\n        assets: true,\n        chunks: false,\n        modules: false,\n        source: false,\n        errorDetails: false,\n        timings: false\n      })\n            // publicPath with resolved [hash] placeholder\n\n      var assetPath = (stats.publicPath && self.options.fullPath) ? stats.publicPath : ''\n            // assetsByChunkName contains a hash with the bundle names and the produced files\n            // e.g. { one: 'one-bundle.js', two: 'two-bundle.js' }\n            // in some cases (when using a plugin or source maps) it might contain an array of produced files\n            // e.g. {\n            // main:\n            //   [ 'index-bundle-42b6e1ec4fa8c5f0303e.js',\n            //     'index-bundle-42b6e1ec4fa8c5f0303e.js.map' ]\n            // }\n      var assetsByChunkName = stats.assetsByChunkName\n\n      var output = Object.keys(assetsByChunkName).reduce(function (chunkMap, chunkName) {\n        var assets = assetsByChunkName[chunkName]\n        if (!Array.isArray(assets)) {\n          assets = [assets]\n        }\n        chunkMap[chunkName] = assets.reduce(function (typeMap, asset) {\n          if (isHMRUpdate(options, asset) || isSourceMap(options, asset)) {\n            return typeMap\n          }\n\n          var typeName = getAssetKind(options, asset)\n          typeMap[typeName] = assetPath + asset\n\n          return typeMap\n        }, {})\n\n        return chunkMap\n      }, {})\n\n      var manifestName = self.options.includeManifest === true ? 'manifest' : self.options.includeManifest\n      if (manifestName) {\n        var manifestEntry = output[manifestName]\n        if (manifestEntry) {\n          var manifestAssetKey = manifestEntry.js.substr(assetPath.length)\n          var parentSource = compilation.assets[manifestAssetKey]\n          var entryText = parentSource.source()\n          if (!entryText) {\n            throw new Error('Could not locate manifest function in source', parentSource)\n          }\n          // use _value if the uglify plugin was applied\n          manifestEntry.text = entryText\n        }\n      }\n\n      if (self.options.metadata) {\n        output.metadata = self.options.metadata\n      }\n\n      self.writer(output, function (err) {\n        if (err) {\n          compilation.errors.push(err)\n        }\n        callback()\n      })\n    })\n  }\n}\n\nmodule.exports = AssetsWebpackPlugin\n","/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/node_modules/assets-webpack-plugin/lib/getAssetKind.js":"var camelcase = require('camelcase')\n\nvar getFileExtension = require('./getFileExtension')\n\nmodule.exports = function getAssetKind (options, asset) {\n  var ext = getFileExtension(asset)\n  return camelcase(ext)\n}\n","/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/node_modules/assets-webpack-plugin/lib/getFileExtension.js":"var URL = require('url')\nvar path = require('path')\n\nmodule.exports = function getFileExtension (asset) {\n  var url = URL.parse(asset)\n  var ext = path.extname(url.pathname)\n  return ext ? ext.slice(1) : ''\n}\n","/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/node_modules/assets-webpack-plugin/lib/isHMRUpdate.js":"var pathTemplate = require('./pathTemplate')\n\nmodule.exports = function isHMRUpdate (options, asset) {\n  var hotUpdateChunkFilename = options.output.hotUpdateChunkFilename\n  var hotUpdateTemplate = pathTemplate(hotUpdateChunkFilename)\n  return hotUpdateTemplate.matches(asset)\n}\n","/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/node_modules/assets-webpack-plugin/lib/pathTemplate.js":"var escapeRegExp = require('escape-string-regexp')\n\nvar SIMPLE_PLACEHOLDER_RX = /^\\[(id|name|file|query|filebase)\\]/i\nvar HASH_PLACEHOLDER_RX = /^\\[((?:chunk)?hash)(?::(\\d+))?\\]/i\n\nvar template_cache = Object.create(null)\n\nmodule.exports = function createTemplate (str) {\n  if (!template_cache[str]) {\n    template_cache[str] = new PathTemplate(str)\n  }\n\n  return template_cache[str]\n}\n\nfunction PathTemplate (template) {\n  this.template = template\n  this.fields = parseTemplate(template)\n  this.matcher = createTemplateMatcher(this.fields)\n}\n\nPathTemplate.prototype = {\n\n  constructor: PathTemplate,\n\n  /**\n   * Returns whether the given path matches this template.\n   *\n   * @param String data\n   */\n  matches: function (path) {\n    return this.matcher.test(path)\n  },\n\n  /**\n   * Applies data to this template and outputs a filename.\n   *\n   * @param Object data\n   */\n  resolve: function (data) {\n    return this.fields.reduce(function (output, field) {\n      var replacement = ''\n      var placeholder = field.placeholder\n      var width = field.width\n\n      if (field.prefix) {\n        output += field.prefix\n      }\n      if (placeholder) {\n        replacement = data[placeholder] || ''\n        if (width && (placeholder === 'hash' || placeholder === 'chunkhash')) {\n          replacement = replacement.slice(0, width)\n        }\n        output += replacement\n      }\n\n      return output\n    }, '')\n  }\n}\n\n/**\n * Loop over the template string and return an array of objects in the form:\n * {\n *     prefix: 'literal text',\n *     placeholder: 'replacement field name'\n *     [, width: maximum hash length for hash & chunkhash placeholders]\n * }\n *\n * The values in the object conceptually represent a span of literal text followed by a single replacement field.\n * If there is no literal text (which can happen if two replacement fields occur consecutively),\n * then prefix will be an empty string.\n * If there is no replacement field, then the value of placeholder will be null.\n * If the value of placeholder is either 'hash' or 'chunkhash', then width will be a positive integer.\n * Otherwise it will be left undefined.\n */\nfunction parseTemplate (str) {\n  var fields = []\n  var char = ''\n  var pos = 0\n  var prefix = ''\n  var match = null\n  var input\n\n  while (true) { // eslint-disable-line no-constant-condition\n    char = str[pos]\n\n    if (!char) {\n      fields.push({\n        prefix: prefix,\n        placeholder: null\n      })\n      break\n    } else if (char === '[') {\n      input = str.slice(pos)\n      match = SIMPLE_PLACEHOLDER_RX.exec(input)\n      if (match) {\n        fields.push({\n          prefix: prefix,\n          placeholder: match[1].toLowerCase()\n        })\n        pos += match[0].length\n        prefix = ''\n        continue\n      }\n\n      match = HASH_PLACEHOLDER_RX.exec(input)\n      if (match) {\n        fields.push({\n          prefix: prefix,\n          placeholder: match[1].toLowerCase(),\n          width: parseInt(match[2] || 0, 10)\n        })\n        pos += match[0].length\n        prefix = ''\n        continue\n      }\n    }\n    prefix += char\n    pos++\n  }\n\n  return fields\n}\n\n/**\n * Returns a RegExp which, given the replacement fields returned by parseTemplate(),\n * can match a file path against a path template.\n */\nfunction createTemplateMatcher (fields) {\n  var length = fields.length\n  var pattern = fields.reduce(function (pattern, field, i) {\n    if (i === 0) {\n      pattern = '^'\n    }\n    if (field.prefix) {\n      pattern += '(' + escapeRegExp(field.prefix) + ')'\n    }\n    if (field.placeholder) {\n      switch (field.placeholder) {\n        case 'id':\n          pattern += '\\\\d+'\n          break\n        case 'hash':\n        case 'chunkhash':\n          pattern += '[0-9a-fA-F]'\n          pattern += field.width ? '{1,' + field.width + '}' : '+'\n          break\n        case 'name':\n        case 'file':\n        case 'filebase':\n          pattern += '.+?'\n          break\n        case 'query':\n          pattern += '(?:\\\\?.+?)?'\n          break\n      }\n    }\n    if (i === length - 1) {\n      pattern += '$'\n    }\n\n    return pattern\n  }, '')\n\n  return new RegExp(pattern)\n}\n","/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/node_modules/assets-webpack-plugin/lib/isSourceMap.js":"var pathTemplate = require('./pathTemplate')\n\nmodule.exports = function isSourceMap (options, asset) {\n  var sourceMapFilename = options.output.sourceMapFilename\n  var sourcemapTemplate = pathTemplate(sourceMapFilename)\n  return sourcemapTemplate.matches(asset)\n}\n","/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/node_modules/assets-webpack-plugin/lib/output/createQueuedWriter.js":"/**\n * Takes in a processor function, and returns a writer function.\n *\n * @param {Function} processor\n *\n * @return {Function} queuedWriter\n */\nmodule.exports = function createQueuedWriter (processor) {\n  var queue = []\n\n  var iterator = function (callback) {\n    return function (err) {\n      queue.shift()\n      callback(err)\n\n      var next = queue[0]\n      if (next) {\n        processor(next.data, iterator(next.callback))\n      }\n    }\n  }\n\n  return function queuedWriter (data, callback) {\n    var empty = !queue.length\n    queue.push({data: data, callback: callback})\n\n    if (empty) {\n            // start processing\n      processor(data, iterator(callback))\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/node_modules/assets-webpack-plugin/lib/output/createOutputWriter.js":"var mkdirp = require('mkdirp')\nvar path = require('path')\nvar fs = require('fs')\nvar merge = require('lodash.merge')\n\nvar error = require('../utils/error')\n\nmodule.exports = function (options) {\n  var outputPath = path.join(options.path, options.filename)\n  var update = options.update\n  var firstRun = true\n\n  options.processOutput = options.processOutput || function (assets) {\n    return JSON.stringify(assets, null, options.prettyPrint ? 2 : null)\n  }\n\n  return function writeOutput (newAssets, next) {\n    // if potions.update is false and we're on the first pass of a (possibly) multicompiler\n    var overwrite = !update && firstRun\n\n    mkdirp(options.path, function (err) {\n      if (err) {\n        return next(error('Could not create output folder ' + options.path, err))\n      }\n      fs.readFile(outputPath, 'utf8', function (err, data) {\n        // if file does not exist, just write data to it\n        if (err && err.code !== 'ENOENT') {\n          return next(error('Could not read output file ' + outputPath, err))\n        }\n        // if options.update is false and we're on first run,\n        // start with empty data\n        data = overwrite ? '{}' : data || '{}'\n\n        var oldAssets\n        try {\n          oldAssets = JSON.parse(data)\n        } catch (err) {\n          oldAssets = {}\n        }\n\n        var assets = merge({}, oldAssets, newAssets)\n        var output = options.processOutput(assets)\n        if (output !== data) {\n          fs.writeFile(outputPath, output, function (err) {\n            if (err) {\n              return next(error('Unable to write to ' + outputPath, err))\n            }\n            firstRun = false\n            next()\n          })\n        } else {\n          next()\n        }\n      })\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-assets-webpack-plugin/node_modules/assets-webpack-plugin/lib/utils/error.js":"var assign = require('lodash.assign')\n\nmodule.exports = function pluginError (message, previousError) {\n  var err = new Error('[AssetsWebpackPlugin] ' + message)\n\n  return previousError ? assign(err, previousError) : err\n}\n"}